"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const openapi_core_1 = require("@redocly/openapi-core");
const push_1 = require("../../commands/push");
jest.mock('fs');
jest.mock('node-fetch', () => ({
    default: jest.fn(() => ({
        ok: true,
        json: jest.fn().mockResolvedValue({}),
    })),
}));
jest.mock('@redocly/openapi-core');
jest.mock('../../utils');
openapi_core_1.getMergedConfig.mockImplementation((config) => config);
describe('push', () => {
    const redoclyClient = require('@redocly/openapi-core').__redoclyClient;
    beforeEach(() => {
        jest.spyOn(process.stdout, 'write').mockImplementation(() => true);
    });
    it('pushes definition', () => __awaiter(void 0, void 0, void 0, function* () {
        yield push_1.handlePush({
            upsert: true,
            entrypoint: 'spec.json',
            destination: '@org/my-api@1.0.0',
            branchName: 'test',
        });
        expect(redoclyClient.registryApi.prepareFileUpload).toBeCalledTimes(1);
        expect(redoclyClient.registryApi.pushApi).toBeCalledTimes(1);
        expect(redoclyClient.registryApi.pushApi).toHaveBeenLastCalledWith({
            branch: 'test',
            filePaths: ['filePath'],
            isUpsert: true,
            name: 'my-api',
            organizationId: 'org',
            rootFilePath: 'filePath',
            version: '1.0.0',
        });
    }));
});
describe('transformPush', () => {
    it('should adapt the existing syntax', () => {
        const cb = jest.fn();
        push_1.transformPush(cb)({
            maybeEntrypointOrAliasOrDestination: 'openapi.yaml',
            maybeDestination: '@testing_org/main@v1',
        });
        expect(cb).toBeCalledWith({
            entrypoint: 'openapi.yaml',
            destination: '@testing_org/main@v1',
        });
    });
    it('should adapt the existing syntax (including branchName)', () => {
        const cb = jest.fn();
        push_1.transformPush(cb)({
            maybeEntrypointOrAliasOrDestination: 'openapi.yaml',
            maybeDestination: '@testing_org/main@v1',
            maybeBranchName: 'other',
        });
        expect(cb).toBeCalledWith({
            entrypoint: 'openapi.yaml',
            destination: '@testing_org/main@v1',
            branchName: 'other',
        });
    });
    it('should use --branch option firstly', () => {
        const cb = jest.fn();
        push_1.transformPush(cb)({
            maybeEntrypointOrAliasOrDestination: 'openapi.yaml',
            maybeDestination: '@testing_org/main@v1',
            maybeBranchName: 'other',
            branch: 'priority-branch',
        });
        expect(cb).toBeCalledWith({
            entrypoint: 'openapi.yaml',
            destination: '@testing_org/main@v1',
            branchName: 'priority-branch',
        });
    });
    it('should work for a destination only', () => {
        const cb = jest.fn();
        push_1.transformPush(cb)({
            maybeEntrypointOrAliasOrDestination: '@testing_org/main@v1',
        });
        expect(cb).toBeCalledWith({
            destination: '@testing_org/main@v1',
        });
    });
    it('should accept aliases for the old syntax', () => {
        const cb = jest.fn();
        push_1.transformPush(cb)({
            maybeEntrypointOrAliasOrDestination: 'alias',
            maybeDestination: '@testing_org/main@v1',
        });
        expect(cb).toBeCalledWith({
            destination: '@testing_org/main@v1',
            entrypoint: 'alias',
        });
    });
    it('should accept no arguments at all', () => {
        const cb = jest.fn();
        push_1.transformPush(cb)({});
        expect(cb).toBeCalledWith({});
    });
});
describe('getDestinationProps', () => {
    it('should get valid destination props for the full destination syntax', () => {
        expect(push_1.getDestinationProps('@testing_org/main@v1', 'org-from-config')).toEqual([
            'testing_org',
            'main',
            'v1',
        ]);
    });
    it('should fallback the organizationId from a config for the short destination syntax', () => {
        expect(push_1.getDestinationProps('main@v1', 'org-from-config')).toEqual([
            'org-from-config',
            'main',
            'v1',
        ]);
    });
    it('should fallback the organizationId from a config if no destination provided', () => {
        expect(push_1.getDestinationProps(undefined, 'org-from-config')).toEqual(['org-from-config']);
    });
    it('should return empty organizationId if there is no one found', () => {
        expect(push_1.getDestinationProps('main@v1', undefined)).toEqual([, 'main', 'v1']);
    });
});
describe('getApiEntrypoint', () => {
    let config = {
        apis: {
            'main@v1': {
                root: 'openapi.yaml',
            },
            main: {
                root: 'latest.yaml',
            },
        },
    };
    it('should resolve the correct api for a valid name & version', () => {
        expect(push_1.getApiEntrypoint({ name: 'main', version: 'v1', config })).toEqual('openapi.yaml');
    });
    it('should resolve the latest version of api if there is no matching version', () => {
        expect(push_1.getApiEntrypoint({ name: 'main', version: 'latest', config })).toEqual('latest.yaml');
    });
});
